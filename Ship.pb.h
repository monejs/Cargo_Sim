// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ship.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Ship_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Ship_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Ship_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Ship_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Ship_2eproto;
namespace ship {
class BulkCargo;
class BulkCargoDefaultTypeInternal;
extern BulkCargoDefaultTypeInternal _BulkCargo_default_instance_;
class Constants;
class ConstantsDefaultTypeInternal;
extern ConstantsDefaultTypeInternal _Constants_default_instance_;
class ShipBodyData;
class ShipBodyDataDefaultTypeInternal;
extern ShipBodyDataDefaultTypeInternal _ShipBodyData_default_instance_;
class ShipData;
class ShipDataDefaultTypeInternal;
extern ShipDataDefaultTypeInternal _ShipData_default_instance_;
class Unit;
class UnitDefaultTypeInternal;
extern UnitDefaultTypeInternal _Unit_default_instance_;
}  // namespace ship
PROTOBUF_NAMESPACE_OPEN
template<> ::ship::BulkCargo* Arena::CreateMaybeMessage<::ship::BulkCargo>(Arena*);
template<> ::ship::Constants* Arena::CreateMaybeMessage<::ship::Constants>(Arena*);
template<> ::ship::ShipBodyData* Arena::CreateMaybeMessage<::ship::ShipBodyData>(Arena*);
template<> ::ship::ShipData* Arena::CreateMaybeMessage<::ship::ShipData>(Arena*);
template<> ::ship::Unit* Arena::CreateMaybeMessage<::ship::Unit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ship {

enum Unit_UnitType : int {
  Unit_UnitType_BALLAST = 0,
  Unit_UnitType_CARGODRY = 1,
  Unit_UnitType_CARGOTANK = 2,
  Unit_UnitType_HFO = 3,
  Unit_UnitType_DO = 4,
  Unit_UnitType_LO = 5,
  Unit_UnitType_FW = 6,
  Unit_UnitType_VA = 7,
  Unit_UnitType_Unit_UnitType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Unit_UnitType_Unit_UnitType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Unit_UnitType_IsValid(int value);
constexpr Unit_UnitType Unit_UnitType_UnitType_MIN = Unit_UnitType_BALLAST;
constexpr Unit_UnitType Unit_UnitType_UnitType_MAX = Unit_UnitType_VA;
constexpr int Unit_UnitType_UnitType_ARRAYSIZE = Unit_UnitType_UnitType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Unit_UnitType_descriptor();
template<typename T>
inline const std::string& Unit_UnitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Unit_UnitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Unit_UnitType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Unit_UnitType_descriptor(), enum_t_value);
}
inline bool Unit_UnitType_Parse(
    const std::string& name, Unit_UnitType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Unit_UnitType>(
    Unit_UnitType_descriptor(), name, value);
}
// ===================================================================

class ShipData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ship.ShipData) */ {
 public:
  ShipData();
  virtual ~ShipData();

  ShipData(const ShipData& from);
  ShipData(ShipData&& from) noexcept
    : ShipData() {
    *this = ::std::move(from);
  }

  inline ShipData& operator=(const ShipData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShipData& operator=(ShipData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShipData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShipData* internal_default_instance() {
    return reinterpret_cast<const ShipData*>(
               &_ShipData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ShipData* other);
  friend void swap(ShipData& a, ShipData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShipData* New() const final {
    return CreateMaybeMessage<ShipData>(nullptr);
  }

  ShipData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShipData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShipData& from);
  void MergeFrom(const ShipData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShipData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ship.ShipData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ship_2eproto);
    return ::descriptor_table_Ship_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ShipName = 1;
  void clear_shipname();
  static const int kShipNameFieldNumber = 1;
  const std::string& shipname() const;
  void set_shipname(const std::string& value);
  void set_shipname(std::string&& value);
  void set_shipname(const char* value);
  void set_shipname(const char* value, size_t size);
  std::string* mutable_shipname();
  std::string* release_shipname();
  void set_allocated_shipname(std::string* shipname);

  // float LOA = 2;
  void clear_loa();
  static const int kLOAFieldNumber = 2;
  float loa() const;
  void set_loa(float value);

  // float height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  float height() const;
  void set_height(float value);

  // float beam = 4;
  void clear_beam();
  static const int kBeamFieldNumber = 4;
  float beam() const;
  void set_beam(float value);

  // float deckStr = 5;
  void clear_deckstr();
  static const int kDeckStrFieldNumber = 5;
  float deckstr() const;
  void set_deckstr(float value);

  // float MinDraft = 6;
  void clear_mindraft();
  static const int kMinDraftFieldNumber = 6;
  float mindraft() const;
  void set_mindraft(float value);

  // float MaxDraft = 7;
  void clear_maxdraft();
  static const int kMaxDraftFieldNumber = 7;
  float maxdraft() const;
  void set_maxdraft(float value);

  // int32 MaxDWT = 8;
  void clear_maxdwt();
  static const int kMaxDWTFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 maxdwt() const;
  void set_maxdwt(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float LCGLight = 9;
  void clear_lcglight();
  static const int kLCGLightFieldNumber = 9;
  float lcglight() const;
  void set_lcglight(float value);

  // float TCGLight = 10;
  void clear_tcglight();
  static const int kTCGLightFieldNumber = 10;
  float tcglight() const;
  void set_tcglight(float value);

  // float VCGLight = 11;
  void clear_vcglight();
  static const int kVCGLightFieldNumber = 11;
  float vcglight() const;
  void set_vcglight(float value);

  // int32 lightShip = 12;
  void clear_lightship();
  static const int kLightShipFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 lightship() const;
  void set_lightship(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float waterCondition = 13;
  void clear_watercondition();
  static const int kWaterConditionFieldNumber = 13;
  float watercondition() const;
  void set_watercondition(float value);

  // float tankStr = 14;
  void clear_tankstr();
  static const int kTankStrFieldNumber = 14;
  float tankstr() const;
  void set_tankstr(float value);

  // @@protoc_insertion_point(class_scope:ship.ShipData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shipname_;
  float loa_;
  float height_;
  float beam_;
  float deckstr_;
  float mindraft_;
  float maxdraft_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxdwt_;
  float lcglight_;
  float tcglight_;
  float vcglight_;
  ::PROTOBUF_NAMESPACE_ID::int32 lightship_;
  float watercondition_;
  float tankstr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ship_2eproto;
};
// -------------------------------------------------------------------

class Unit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ship.Unit) */ {
 public:
  Unit();
  virtual ~Unit();

  Unit(const Unit& from);
  Unit(Unit&& from) noexcept
    : Unit() {
    *this = ::std::move(from);
  }

  inline Unit& operator=(const Unit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Unit& operator=(Unit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Unit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Unit* internal_default_instance() {
    return reinterpret_cast<const Unit*>(
               &_Unit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Unit* other);
  friend void swap(Unit& a, Unit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Unit* New() const final {
    return CreateMaybeMessage<Unit>(nullptr);
  }

  Unit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Unit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Unit& from);
  void MergeFrom(const Unit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ship.Unit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ship_2eproto);
    return ::descriptor_table_Ship_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Unit_UnitType UnitType;
  static constexpr UnitType BALLAST =
    Unit_UnitType_BALLAST;
  static constexpr UnitType CARGODRY =
    Unit_UnitType_CARGODRY;
  static constexpr UnitType CARGOTANK =
    Unit_UnitType_CARGOTANK;
  static constexpr UnitType HFO =
    Unit_UnitType_HFO;
  static constexpr UnitType DO =
    Unit_UnitType_DO;
  static constexpr UnitType LO =
    Unit_UnitType_LO;
  static constexpr UnitType FW =
    Unit_UnitType_FW;
  static constexpr UnitType VA =
    Unit_UnitType_VA;
  static inline bool UnitType_IsValid(int value) {
    return Unit_UnitType_IsValid(value);
  }
  static constexpr UnitType UnitType_MIN =
    Unit_UnitType_UnitType_MIN;
  static constexpr UnitType UnitType_MAX =
    Unit_UnitType_UnitType_MAX;
  static constexpr int UnitType_ARRAYSIZE =
    Unit_UnitType_UnitType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UnitType_descriptor() {
    return Unit_UnitType_descriptor();
  }
  template<typename T>
  static inline const std::string& UnitType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UnitType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UnitType_Name.");
    return Unit_UnitType_Name(enum_t_value);
  }
  static inline bool UnitType_Parse(const std::string& name,
      UnitType* value) {
    return Unit_UnitType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // float lcg = 2;
  void clear_lcg();
  static const int kLcgFieldNumber = 2;
  float lcg() const;
  void set_lcg(float value);

  // float tcg = 3;
  void clear_tcg();
  static const int kTcgFieldNumber = 3;
  float tcg() const;
  void set_tcg(float value);

  // float vcg = 4;
  void clear_vcg();
  static const int kVcgFieldNumber = 4;
  float vcg() const;
  void set_vcg(float value);

  // float length = 5;
  void clear_length();
  static const int kLengthFieldNumber = 5;
  float length() const;
  void set_length(float value);

  // float breadth = 6;
  void clear_breadth();
  static const int kBreadthFieldNumber = 6;
  float breadth() const;
  void set_breadth(float value);

  // float height = 7;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  float height() const;
  void set_height(float value);

  // float density = 8;
  void clear_density();
  static const int kDensityFieldNumber = 8;
  float density() const;
  void set_density(float value);

  // float volume = 9;
  void clear_volume();
  static const int kVolumeFieldNumber = 9;
  float volume() const;
  void set_volume(float value);

  // .ship.Unit.UnitType type = 12;
  void clear_type();
  static const int kTypeFieldNumber = 12;
  ::ship::Unit_UnitType type() const;
  void set_type(::ship::Unit_UnitType value);

  // @@protoc_insertion_point(class_scope:ship.Unit)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float lcg_;
  float tcg_;
  float vcg_;
  float length_;
  float breadth_;
  float height_;
  float density_;
  float volume_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ship_2eproto;
};
// -------------------------------------------------------------------

class BulkCargo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ship.BulkCargo) */ {
 public:
  BulkCargo();
  virtual ~BulkCargo();

  BulkCargo(const BulkCargo& from);
  BulkCargo(BulkCargo&& from) noexcept
    : BulkCargo() {
    *this = ::std::move(from);
  }

  inline BulkCargo& operator=(const BulkCargo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkCargo& operator=(BulkCargo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkCargo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulkCargo* internal_default_instance() {
    return reinterpret_cast<const BulkCargo*>(
               &_BulkCargo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BulkCargo* other);
  friend void swap(BulkCargo& a, BulkCargo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BulkCargo* New() const final {
    return CreateMaybeMessage<BulkCargo>(nullptr);
  }

  BulkCargo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkCargo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkCargo& from);
  void MergeFrom(const BulkCargo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkCargo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ship.BulkCargo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ship_2eproto);
    return ::descriptor_table_Ship_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // float lcg = 2;
  void clear_lcg();
  static const int kLcgFieldNumber = 2;
  float lcg() const;
  void set_lcg(float value);

  // float tcg = 3;
  void clear_tcg();
  static const int kTcgFieldNumber = 3;
  float tcg() const;
  void set_tcg(float value);

  // float vcg = 4;
  void clear_vcg();
  static const int kVcgFieldNumber = 4;
  float vcg() const;
  void set_vcg(float value);

  // float length = 5;
  void clear_length();
  static const int kLengthFieldNumber = 5;
  float length() const;
  void set_length(float value);

  // float breadth = 6;
  void clear_breadth();
  static const int kBreadthFieldNumber = 6;
  float breadth() const;
  void set_breadth(float value);

  // float height = 7;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  float height() const;
  void set_height(float value);

  // float weight = 9;
  void clear_weight();
  static const int kWeightFieldNumber = 9;
  float weight() const;
  void set_weight(float value);

  // @@protoc_insertion_point(class_scope:ship.BulkCargo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float lcg_;
  float tcg_;
  float vcg_;
  float length_;
  float breadth_;
  float height_;
  float weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ship_2eproto;
};
// -------------------------------------------------------------------

class Constants :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ship.Constants) */ {
 public:
  Constants();
  virtual ~Constants();

  Constants(const Constants& from);
  Constants(Constants&& from) noexcept
    : Constants() {
    *this = ::std::move(from);
  }

  inline Constants& operator=(const Constants& from) {
    CopyFrom(from);
    return *this;
  }
  inline Constants& operator=(Constants&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Constants& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Constants* internal_default_instance() {
    return reinterpret_cast<const Constants*>(
               &_Constants_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Constants* other);
  friend void swap(Constants& a, Constants& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Constants* New() const final {
    return CreateMaybeMessage<Constants>(nullptr);
  }

  Constants* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Constants>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Constants& from);
  void MergeFrom(const Constants& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Constants* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ship.Constants";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ship_2eproto);
    return ::descriptor_table_Ship_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // float lcg = 2;
  void clear_lcg();
  static const int kLcgFieldNumber = 2;
  float lcg() const;
  void set_lcg(float value);

  // float tcg = 3;
  void clear_tcg();
  static const int kTcgFieldNumber = 3;
  float tcg() const;
  void set_tcg(float value);

  // float vcg = 4;
  void clear_vcg();
  static const int kVcgFieldNumber = 4;
  float vcg() const;
  void set_vcg(float value);

  // float weight = 5;
  void clear_weight();
  static const int kWeightFieldNumber = 5;
  float weight() const;
  void set_weight(float value);

  // float start = 6;
  void clear_start();
  static const int kStartFieldNumber = 6;
  float start() const;
  void set_start(float value);

  // float end = 7;
  void clear_end();
  static const int kEndFieldNumber = 7;
  float end() const;
  void set_end(float value);

  // @@protoc_insertion_point(class_scope:ship.Constants)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float lcg_;
  float tcg_;
  float vcg_;
  float weight_;
  float start_;
  float end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ship_2eproto;
};
// -------------------------------------------------------------------

class ShipBodyData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ship.ShipBodyData) */ {
 public:
  ShipBodyData();
  virtual ~ShipBodyData();

  ShipBodyData(const ShipBodyData& from);
  ShipBodyData(ShipBodyData&& from) noexcept
    : ShipBodyData() {
    *this = ::std::move(from);
  }

  inline ShipBodyData& operator=(const ShipBodyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShipBodyData& operator=(ShipBodyData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShipBodyData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShipBodyData* internal_default_instance() {
    return reinterpret_cast<const ShipBodyData*>(
               &_ShipBodyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ShipBodyData* other);
  friend void swap(ShipBodyData& a, ShipBodyData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShipBodyData* New() const final {
    return CreateMaybeMessage<ShipBodyData>(nullptr);
  }

  ShipBodyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShipBodyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShipBodyData& from);
  void MergeFrom(const ShipBodyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShipBodyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ship.ShipBodyData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Ship_2eproto);
    return ::descriptor_table_Ship_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ship.ShipData shipdata = 1;
  int shipdata_size() const;
  void clear_shipdata();
  static const int kShipdataFieldNumber = 1;
  ::ship::ShipData* mutable_shipdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::ShipData >*
      mutable_shipdata();
  const ::ship::ShipData& shipdata(int index) const;
  ::ship::ShipData* add_shipdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::ShipData >&
      shipdata() const;

  // repeated .ship.Unit unit = 2;
  int unit_size() const;
  void clear_unit();
  static const int kUnitFieldNumber = 2;
  ::ship::Unit* mutable_unit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::Unit >*
      mutable_unit();
  const ::ship::Unit& unit(int index) const;
  ::ship::Unit* add_unit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::Unit >&
      unit() const;

  // repeated .ship.Constants constants = 3;
  int constants_size() const;
  void clear_constants();
  static const int kConstantsFieldNumber = 3;
  ::ship::Constants* mutable_constants(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::Constants >*
      mutable_constants();
  const ::ship::Constants& constants(int index) const;
  ::ship::Constants* add_constants();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::Constants >&
      constants() const;

  // repeated .ship.BulkCargo bulk = 6;
  int bulk_size() const;
  void clear_bulk();
  static const int kBulkFieldNumber = 6;
  ::ship::BulkCargo* mutable_bulk(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::BulkCargo >*
      mutable_bulk();
  const ::ship::BulkCargo& bulk(int index) const;
  ::ship::BulkCargo* add_bulk();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::BulkCargo >&
      bulk() const;

  // @@protoc_insertion_point(class_scope:ship.ShipBodyData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::ShipData > shipdata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::Unit > unit_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::Constants > constants_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::BulkCargo > bulk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ship_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShipData

// string ShipName = 1;
inline void ShipData::clear_shipname() {
  shipname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ShipData::shipname() const {
  // @@protoc_insertion_point(field_get:ship.ShipData.ShipName)
  return shipname_.GetNoArena();
}
inline void ShipData::set_shipname(const std::string& value) {
  
  shipname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ship.ShipData.ShipName)
}
inline void ShipData::set_shipname(std::string&& value) {
  
  shipname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ship.ShipData.ShipName)
}
inline void ShipData::set_shipname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shipname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ship.ShipData.ShipName)
}
inline void ShipData::set_shipname(const char* value, size_t size) {
  
  shipname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ship.ShipData.ShipName)
}
inline std::string* ShipData::mutable_shipname() {
  
  // @@protoc_insertion_point(field_mutable:ship.ShipData.ShipName)
  return shipname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ShipData::release_shipname() {
  // @@protoc_insertion_point(field_release:ship.ShipData.ShipName)
  
  return shipname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ShipData::set_allocated_shipname(std::string* shipname) {
  if (shipname != nullptr) {
    
  } else {
    
  }
  shipname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shipname);
  // @@protoc_insertion_point(field_set_allocated:ship.ShipData.ShipName)
}

// float LOA = 2;
inline void ShipData::clear_loa() {
  loa_ = 0;
}
inline float ShipData::loa() const {
  // @@protoc_insertion_point(field_get:ship.ShipData.LOA)
  return loa_;
}
inline void ShipData::set_loa(float value) {
  
  loa_ = value;
  // @@protoc_insertion_point(field_set:ship.ShipData.LOA)
}

// float height = 3;
inline void ShipData::clear_height() {
  height_ = 0;
}
inline float ShipData::height() const {
  // @@protoc_insertion_point(field_get:ship.ShipData.height)
  return height_;
}
inline void ShipData::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:ship.ShipData.height)
}

// float beam = 4;
inline void ShipData::clear_beam() {
  beam_ = 0;
}
inline float ShipData::beam() const {
  // @@protoc_insertion_point(field_get:ship.ShipData.beam)
  return beam_;
}
inline void ShipData::set_beam(float value) {
  
  beam_ = value;
  // @@protoc_insertion_point(field_set:ship.ShipData.beam)
}

// float deckStr = 5;
inline void ShipData::clear_deckstr() {
  deckstr_ = 0;
}
inline float ShipData::deckstr() const {
  // @@protoc_insertion_point(field_get:ship.ShipData.deckStr)
  return deckstr_;
}
inline void ShipData::set_deckstr(float value) {
  
  deckstr_ = value;
  // @@protoc_insertion_point(field_set:ship.ShipData.deckStr)
}

// float MinDraft = 6;
inline void ShipData::clear_mindraft() {
  mindraft_ = 0;
}
inline float ShipData::mindraft() const {
  // @@protoc_insertion_point(field_get:ship.ShipData.MinDraft)
  return mindraft_;
}
inline void ShipData::set_mindraft(float value) {
  
  mindraft_ = value;
  // @@protoc_insertion_point(field_set:ship.ShipData.MinDraft)
}

// float MaxDraft = 7;
inline void ShipData::clear_maxdraft() {
  maxdraft_ = 0;
}
inline float ShipData::maxdraft() const {
  // @@protoc_insertion_point(field_get:ship.ShipData.MaxDraft)
  return maxdraft_;
}
inline void ShipData::set_maxdraft(float value) {
  
  maxdraft_ = value;
  // @@protoc_insertion_point(field_set:ship.ShipData.MaxDraft)
}

// int32 MaxDWT = 8;
inline void ShipData::clear_maxdwt() {
  maxdwt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipData::maxdwt() const {
  // @@protoc_insertion_point(field_get:ship.ShipData.MaxDWT)
  return maxdwt_;
}
inline void ShipData::set_maxdwt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxdwt_ = value;
  // @@protoc_insertion_point(field_set:ship.ShipData.MaxDWT)
}

// float LCGLight = 9;
inline void ShipData::clear_lcglight() {
  lcglight_ = 0;
}
inline float ShipData::lcglight() const {
  // @@protoc_insertion_point(field_get:ship.ShipData.LCGLight)
  return lcglight_;
}
inline void ShipData::set_lcglight(float value) {
  
  lcglight_ = value;
  // @@protoc_insertion_point(field_set:ship.ShipData.LCGLight)
}

// float TCGLight = 10;
inline void ShipData::clear_tcglight() {
  tcglight_ = 0;
}
inline float ShipData::tcglight() const {
  // @@protoc_insertion_point(field_get:ship.ShipData.TCGLight)
  return tcglight_;
}
inline void ShipData::set_tcglight(float value) {
  
  tcglight_ = value;
  // @@protoc_insertion_point(field_set:ship.ShipData.TCGLight)
}

// float VCGLight = 11;
inline void ShipData::clear_vcglight() {
  vcglight_ = 0;
}
inline float ShipData::vcglight() const {
  // @@protoc_insertion_point(field_get:ship.ShipData.VCGLight)
  return vcglight_;
}
inline void ShipData::set_vcglight(float value) {
  
  vcglight_ = value;
  // @@protoc_insertion_point(field_set:ship.ShipData.VCGLight)
}

// int32 lightShip = 12;
inline void ShipData::clear_lightship() {
  lightship_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipData::lightship() const {
  // @@protoc_insertion_point(field_get:ship.ShipData.lightShip)
  return lightship_;
}
inline void ShipData::set_lightship(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lightship_ = value;
  // @@protoc_insertion_point(field_set:ship.ShipData.lightShip)
}

// float waterCondition = 13;
inline void ShipData::clear_watercondition() {
  watercondition_ = 0;
}
inline float ShipData::watercondition() const {
  // @@protoc_insertion_point(field_get:ship.ShipData.waterCondition)
  return watercondition_;
}
inline void ShipData::set_watercondition(float value) {
  
  watercondition_ = value;
  // @@protoc_insertion_point(field_set:ship.ShipData.waterCondition)
}

// float tankStr = 14;
inline void ShipData::clear_tankstr() {
  tankstr_ = 0;
}
inline float ShipData::tankstr() const {
  // @@protoc_insertion_point(field_get:ship.ShipData.tankStr)
  return tankstr_;
}
inline void ShipData::set_tankstr(float value) {
  
  tankstr_ = value;
  // @@protoc_insertion_point(field_set:ship.ShipData.tankStr)
}

// -------------------------------------------------------------------

// Unit

// string Name = 1;
inline void Unit::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Unit::name() const {
  // @@protoc_insertion_point(field_get:ship.Unit.Name)
  return name_.GetNoArena();
}
inline void Unit::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ship.Unit.Name)
}
inline void Unit::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ship.Unit.Name)
}
inline void Unit::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ship.Unit.Name)
}
inline void Unit::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ship.Unit.Name)
}
inline std::string* Unit::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ship.Unit.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Unit::release_name() {
  // @@protoc_insertion_point(field_release:ship.Unit.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Unit::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ship.Unit.Name)
}

// float lcg = 2;
inline void Unit::clear_lcg() {
  lcg_ = 0;
}
inline float Unit::lcg() const {
  // @@protoc_insertion_point(field_get:ship.Unit.lcg)
  return lcg_;
}
inline void Unit::set_lcg(float value) {
  
  lcg_ = value;
  // @@protoc_insertion_point(field_set:ship.Unit.lcg)
}

// float tcg = 3;
inline void Unit::clear_tcg() {
  tcg_ = 0;
}
inline float Unit::tcg() const {
  // @@protoc_insertion_point(field_get:ship.Unit.tcg)
  return tcg_;
}
inline void Unit::set_tcg(float value) {
  
  tcg_ = value;
  // @@protoc_insertion_point(field_set:ship.Unit.tcg)
}

// float vcg = 4;
inline void Unit::clear_vcg() {
  vcg_ = 0;
}
inline float Unit::vcg() const {
  // @@protoc_insertion_point(field_get:ship.Unit.vcg)
  return vcg_;
}
inline void Unit::set_vcg(float value) {
  
  vcg_ = value;
  // @@protoc_insertion_point(field_set:ship.Unit.vcg)
}

// float length = 5;
inline void Unit::clear_length() {
  length_ = 0;
}
inline float Unit::length() const {
  // @@protoc_insertion_point(field_get:ship.Unit.length)
  return length_;
}
inline void Unit::set_length(float value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:ship.Unit.length)
}

// float breadth = 6;
inline void Unit::clear_breadth() {
  breadth_ = 0;
}
inline float Unit::breadth() const {
  // @@protoc_insertion_point(field_get:ship.Unit.breadth)
  return breadth_;
}
inline void Unit::set_breadth(float value) {
  
  breadth_ = value;
  // @@protoc_insertion_point(field_set:ship.Unit.breadth)
}

// float height = 7;
inline void Unit::clear_height() {
  height_ = 0;
}
inline float Unit::height() const {
  // @@protoc_insertion_point(field_get:ship.Unit.height)
  return height_;
}
inline void Unit::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:ship.Unit.height)
}

// float density = 8;
inline void Unit::clear_density() {
  density_ = 0;
}
inline float Unit::density() const {
  // @@protoc_insertion_point(field_get:ship.Unit.density)
  return density_;
}
inline void Unit::set_density(float value) {
  
  density_ = value;
  // @@protoc_insertion_point(field_set:ship.Unit.density)
}

// float volume = 9;
inline void Unit::clear_volume() {
  volume_ = 0;
}
inline float Unit::volume() const {
  // @@protoc_insertion_point(field_get:ship.Unit.volume)
  return volume_;
}
inline void Unit::set_volume(float value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:ship.Unit.volume)
}

// .ship.Unit.UnitType type = 12;
inline void Unit::clear_type() {
  type_ = 0;
}
inline ::ship::Unit_UnitType Unit::type() const {
  // @@protoc_insertion_point(field_get:ship.Unit.type)
  return static_cast< ::ship::Unit_UnitType >(type_);
}
inline void Unit::set_type(::ship::Unit_UnitType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ship.Unit.type)
}

// -------------------------------------------------------------------

// BulkCargo

// string Name = 1;
inline void BulkCargo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BulkCargo::name() const {
  // @@protoc_insertion_point(field_get:ship.BulkCargo.Name)
  return name_.GetNoArena();
}
inline void BulkCargo::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ship.BulkCargo.Name)
}
inline void BulkCargo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ship.BulkCargo.Name)
}
inline void BulkCargo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ship.BulkCargo.Name)
}
inline void BulkCargo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ship.BulkCargo.Name)
}
inline std::string* BulkCargo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ship.BulkCargo.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BulkCargo::release_name() {
  // @@protoc_insertion_point(field_release:ship.BulkCargo.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BulkCargo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ship.BulkCargo.Name)
}

// float lcg = 2;
inline void BulkCargo::clear_lcg() {
  lcg_ = 0;
}
inline float BulkCargo::lcg() const {
  // @@protoc_insertion_point(field_get:ship.BulkCargo.lcg)
  return lcg_;
}
inline void BulkCargo::set_lcg(float value) {
  
  lcg_ = value;
  // @@protoc_insertion_point(field_set:ship.BulkCargo.lcg)
}

// float tcg = 3;
inline void BulkCargo::clear_tcg() {
  tcg_ = 0;
}
inline float BulkCargo::tcg() const {
  // @@protoc_insertion_point(field_get:ship.BulkCargo.tcg)
  return tcg_;
}
inline void BulkCargo::set_tcg(float value) {
  
  tcg_ = value;
  // @@protoc_insertion_point(field_set:ship.BulkCargo.tcg)
}

// float vcg = 4;
inline void BulkCargo::clear_vcg() {
  vcg_ = 0;
}
inline float BulkCargo::vcg() const {
  // @@protoc_insertion_point(field_get:ship.BulkCargo.vcg)
  return vcg_;
}
inline void BulkCargo::set_vcg(float value) {
  
  vcg_ = value;
  // @@protoc_insertion_point(field_set:ship.BulkCargo.vcg)
}

// float length = 5;
inline void BulkCargo::clear_length() {
  length_ = 0;
}
inline float BulkCargo::length() const {
  // @@protoc_insertion_point(field_get:ship.BulkCargo.length)
  return length_;
}
inline void BulkCargo::set_length(float value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:ship.BulkCargo.length)
}

// float breadth = 6;
inline void BulkCargo::clear_breadth() {
  breadth_ = 0;
}
inline float BulkCargo::breadth() const {
  // @@protoc_insertion_point(field_get:ship.BulkCargo.breadth)
  return breadth_;
}
inline void BulkCargo::set_breadth(float value) {
  
  breadth_ = value;
  // @@protoc_insertion_point(field_set:ship.BulkCargo.breadth)
}

// float height = 7;
inline void BulkCargo::clear_height() {
  height_ = 0;
}
inline float BulkCargo::height() const {
  // @@protoc_insertion_point(field_get:ship.BulkCargo.height)
  return height_;
}
inline void BulkCargo::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:ship.BulkCargo.height)
}

// float weight = 9;
inline void BulkCargo::clear_weight() {
  weight_ = 0;
}
inline float BulkCargo::weight() const {
  // @@protoc_insertion_point(field_get:ship.BulkCargo.weight)
  return weight_;
}
inline void BulkCargo::set_weight(float value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:ship.BulkCargo.weight)
}

// -------------------------------------------------------------------

// Constants

// string Name = 1;
inline void Constants::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Constants::name() const {
  // @@protoc_insertion_point(field_get:ship.Constants.Name)
  return name_.GetNoArena();
}
inline void Constants::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ship.Constants.Name)
}
inline void Constants::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ship.Constants.Name)
}
inline void Constants::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ship.Constants.Name)
}
inline void Constants::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ship.Constants.Name)
}
inline std::string* Constants::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ship.Constants.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Constants::release_name() {
  // @@protoc_insertion_point(field_release:ship.Constants.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Constants::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ship.Constants.Name)
}

// float lcg = 2;
inline void Constants::clear_lcg() {
  lcg_ = 0;
}
inline float Constants::lcg() const {
  // @@protoc_insertion_point(field_get:ship.Constants.lcg)
  return lcg_;
}
inline void Constants::set_lcg(float value) {
  
  lcg_ = value;
  // @@protoc_insertion_point(field_set:ship.Constants.lcg)
}

// float tcg = 3;
inline void Constants::clear_tcg() {
  tcg_ = 0;
}
inline float Constants::tcg() const {
  // @@protoc_insertion_point(field_get:ship.Constants.tcg)
  return tcg_;
}
inline void Constants::set_tcg(float value) {
  
  tcg_ = value;
  // @@protoc_insertion_point(field_set:ship.Constants.tcg)
}

// float vcg = 4;
inline void Constants::clear_vcg() {
  vcg_ = 0;
}
inline float Constants::vcg() const {
  // @@protoc_insertion_point(field_get:ship.Constants.vcg)
  return vcg_;
}
inline void Constants::set_vcg(float value) {
  
  vcg_ = value;
  // @@protoc_insertion_point(field_set:ship.Constants.vcg)
}

// float weight = 5;
inline void Constants::clear_weight() {
  weight_ = 0;
}
inline float Constants::weight() const {
  // @@protoc_insertion_point(field_get:ship.Constants.weight)
  return weight_;
}
inline void Constants::set_weight(float value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:ship.Constants.weight)
}

// float start = 6;
inline void Constants::clear_start() {
  start_ = 0;
}
inline float Constants::start() const {
  // @@protoc_insertion_point(field_get:ship.Constants.start)
  return start_;
}
inline void Constants::set_start(float value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:ship.Constants.start)
}

// float end = 7;
inline void Constants::clear_end() {
  end_ = 0;
}
inline float Constants::end() const {
  // @@protoc_insertion_point(field_get:ship.Constants.end)
  return end_;
}
inline void Constants::set_end(float value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:ship.Constants.end)
}

// -------------------------------------------------------------------

// ShipBodyData

// repeated .ship.ShipData shipdata = 1;
inline int ShipBodyData::shipdata_size() const {
  return shipdata_.size();
}
inline void ShipBodyData::clear_shipdata() {
  shipdata_.Clear();
}
inline ::ship::ShipData* ShipBodyData::mutable_shipdata(int index) {
  // @@protoc_insertion_point(field_mutable:ship.ShipBodyData.shipdata)
  return shipdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::ShipData >*
ShipBodyData::mutable_shipdata() {
  // @@protoc_insertion_point(field_mutable_list:ship.ShipBodyData.shipdata)
  return &shipdata_;
}
inline const ::ship::ShipData& ShipBodyData::shipdata(int index) const {
  // @@protoc_insertion_point(field_get:ship.ShipBodyData.shipdata)
  return shipdata_.Get(index);
}
inline ::ship::ShipData* ShipBodyData::add_shipdata() {
  // @@protoc_insertion_point(field_add:ship.ShipBodyData.shipdata)
  return shipdata_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::ShipData >&
ShipBodyData::shipdata() const {
  // @@protoc_insertion_point(field_list:ship.ShipBodyData.shipdata)
  return shipdata_;
}

// repeated .ship.Unit unit = 2;
inline int ShipBodyData::unit_size() const {
  return unit_.size();
}
inline void ShipBodyData::clear_unit() {
  unit_.Clear();
}
inline ::ship::Unit* ShipBodyData::mutable_unit(int index) {
  // @@protoc_insertion_point(field_mutable:ship.ShipBodyData.unit)
  return unit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::Unit >*
ShipBodyData::mutable_unit() {
  // @@protoc_insertion_point(field_mutable_list:ship.ShipBodyData.unit)
  return &unit_;
}
inline const ::ship::Unit& ShipBodyData::unit(int index) const {
  // @@protoc_insertion_point(field_get:ship.ShipBodyData.unit)
  return unit_.Get(index);
}
inline ::ship::Unit* ShipBodyData::add_unit() {
  // @@protoc_insertion_point(field_add:ship.ShipBodyData.unit)
  return unit_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::Unit >&
ShipBodyData::unit() const {
  // @@protoc_insertion_point(field_list:ship.ShipBodyData.unit)
  return unit_;
}

// repeated .ship.Constants constants = 3;
inline int ShipBodyData::constants_size() const {
  return constants_.size();
}
inline void ShipBodyData::clear_constants() {
  constants_.Clear();
}
inline ::ship::Constants* ShipBodyData::mutable_constants(int index) {
  // @@protoc_insertion_point(field_mutable:ship.ShipBodyData.constants)
  return constants_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::Constants >*
ShipBodyData::mutable_constants() {
  // @@protoc_insertion_point(field_mutable_list:ship.ShipBodyData.constants)
  return &constants_;
}
inline const ::ship::Constants& ShipBodyData::constants(int index) const {
  // @@protoc_insertion_point(field_get:ship.ShipBodyData.constants)
  return constants_.Get(index);
}
inline ::ship::Constants* ShipBodyData::add_constants() {
  // @@protoc_insertion_point(field_add:ship.ShipBodyData.constants)
  return constants_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::Constants >&
ShipBodyData::constants() const {
  // @@protoc_insertion_point(field_list:ship.ShipBodyData.constants)
  return constants_;
}

// repeated .ship.BulkCargo bulk = 6;
inline int ShipBodyData::bulk_size() const {
  return bulk_.size();
}
inline void ShipBodyData::clear_bulk() {
  bulk_.Clear();
}
inline ::ship::BulkCargo* ShipBodyData::mutable_bulk(int index) {
  // @@protoc_insertion_point(field_mutable:ship.ShipBodyData.bulk)
  return bulk_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::BulkCargo >*
ShipBodyData::mutable_bulk() {
  // @@protoc_insertion_point(field_mutable_list:ship.ShipBodyData.bulk)
  return &bulk_;
}
inline const ::ship::BulkCargo& ShipBodyData::bulk(int index) const {
  // @@protoc_insertion_point(field_get:ship.ShipBodyData.bulk)
  return bulk_.Get(index);
}
inline ::ship::BulkCargo* ShipBodyData::add_bulk() {
  // @@protoc_insertion_point(field_add:ship.ShipBodyData.bulk)
  return bulk_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ship::BulkCargo >&
ShipBodyData::bulk() const {
  // @@protoc_insertion_point(field_list:ship.ShipBodyData.bulk)
  return bulk_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ship

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ship::Unit_UnitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ship::Unit_UnitType>() {
  return ::ship::Unit_UnitType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Ship_2eproto
