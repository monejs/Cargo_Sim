// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ship.proto

#include "Ship.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Ship_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BulkCargo_Ship_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ship_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Constants_Ship_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ship_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShipData_Ship_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Ship_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Unit_Ship_2eproto;
namespace ship {
class ShipDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShipData> _instance;
} _ShipData_default_instance_;
class UnitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Unit> _instance;
} _Unit_default_instance_;
class BulkCargoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkCargo> _instance;
} _BulkCargo_default_instance_;
class ConstantsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Constants> _instance;
} _Constants_default_instance_;
class ShipBodyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShipBodyData> _instance;
} _ShipBodyData_default_instance_;
}  // namespace ship
static void InitDefaultsscc_info_BulkCargo_Ship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ship::_BulkCargo_default_instance_;
    new (ptr) ::ship::BulkCargo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ship::BulkCargo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BulkCargo_Ship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BulkCargo_Ship_2eproto}, {}};

static void InitDefaultsscc_info_Constants_Ship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ship::_Constants_default_instance_;
    new (ptr) ::ship::Constants();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ship::Constants::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Constants_Ship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Constants_Ship_2eproto}, {}};

static void InitDefaultsscc_info_ShipBodyData_Ship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ship::_ShipBodyData_default_instance_;
    new (ptr) ::ship::ShipBodyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ship::ShipBodyData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ShipBodyData_Ship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_ShipBodyData_Ship_2eproto}, {
      &scc_info_ShipData_Ship_2eproto.base,
      &scc_info_Unit_Ship_2eproto.base,
      &scc_info_Constants_Ship_2eproto.base,
      &scc_info_BulkCargo_Ship_2eproto.base,}};

static void InitDefaultsscc_info_ShipData_Ship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ship::_ShipData_default_instance_;
    new (ptr) ::ship::ShipData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ship::ShipData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShipData_Ship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ShipData_Ship_2eproto}, {}};

static void InitDefaultsscc_info_Unit_Ship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ship::_Unit_default_instance_;
    new (ptr) ::ship::Unit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ship::Unit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Unit_Ship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Unit_Ship_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Ship_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Ship_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Ship_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Ship_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ship::ShipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ship::ShipData, shipname_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipData, loa_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipData, height_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipData, beam_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipData, deckstr_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipData, mindraft_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipData, maxdraft_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipData, maxdwt_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipData, lcglight_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipData, tcglight_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipData, vcglight_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipData, lightship_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipData, watercondition_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipData, tankstr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ship::Unit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ship::Unit, name_),
  PROTOBUF_FIELD_OFFSET(::ship::Unit, lcg_),
  PROTOBUF_FIELD_OFFSET(::ship::Unit, tcg_),
  PROTOBUF_FIELD_OFFSET(::ship::Unit, vcg_),
  PROTOBUF_FIELD_OFFSET(::ship::Unit, length_),
  PROTOBUF_FIELD_OFFSET(::ship::Unit, breadth_),
  PROTOBUF_FIELD_OFFSET(::ship::Unit, height_),
  PROTOBUF_FIELD_OFFSET(::ship::Unit, density_),
  PROTOBUF_FIELD_OFFSET(::ship::Unit, volume_),
  PROTOBUF_FIELD_OFFSET(::ship::Unit, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ship::BulkCargo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ship::BulkCargo, name_),
  PROTOBUF_FIELD_OFFSET(::ship::BulkCargo, lcg_),
  PROTOBUF_FIELD_OFFSET(::ship::BulkCargo, tcg_),
  PROTOBUF_FIELD_OFFSET(::ship::BulkCargo, vcg_),
  PROTOBUF_FIELD_OFFSET(::ship::BulkCargo, length_),
  PROTOBUF_FIELD_OFFSET(::ship::BulkCargo, breadth_),
  PROTOBUF_FIELD_OFFSET(::ship::BulkCargo, height_),
  PROTOBUF_FIELD_OFFSET(::ship::BulkCargo, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ship::Constants, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ship::Constants, name_),
  PROTOBUF_FIELD_OFFSET(::ship::Constants, lcg_),
  PROTOBUF_FIELD_OFFSET(::ship::Constants, tcg_),
  PROTOBUF_FIELD_OFFSET(::ship::Constants, vcg_),
  PROTOBUF_FIELD_OFFSET(::ship::Constants, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ship::ShipBodyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ship::ShipBodyData, shipdata_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipBodyData, unit_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipBodyData, constants_),
  PROTOBUF_FIELD_OFFSET(::ship::ShipBodyData, bulk_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ship::ShipData)},
  { 19, -1, sizeof(::ship::Unit)},
  { 34, -1, sizeof(::ship::BulkCargo)},
  { 47, -1, sizeof(::ship::Constants)},
  { 57, -1, sizeof(::ship::ShipBodyData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ship::_ShipData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ship::_Unit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ship::_BulkCargo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ship::_Constants_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ship::_ShipBodyData_default_instance_),
};

const char descriptor_table_protodef_Ship_2eproto[] =
  "\n\nShip.proto\022\004ship\"\376\001\n\010ShipData\022\020\n\010ShipN"
  "ame\030\001 \001(\t\022\013\n\003LOA\030\002 \001(\002\022\016\n\006height\030\003 \001(\002\022\014"
  "\n\004beam\030\004 \001(\002\022\017\n\007deckStr\030\005 \001(\002\022\020\n\010MinDraf"
  "t\030\006 \001(\002\022\020\n\010MaxDraft\030\007 \001(\002\022\016\n\006MaxDWT\030\010 \001("
  "\005\022\020\n\010LCGLight\030\t \001(\002\022\020\n\010TCGLight\030\n \001(\002\022\020\n"
  "\010VCGLight\030\013 \001(\002\022\021\n\tlightShip\030\014 \001(\005\022\026\n\016wa"
  "terCondition\030\r \001(\002\022\017\n\007tankStr\030\016 \001(\002\"\217\002\n\004"
  "Unit\022\014\n\004Name\030\001 \001(\t\022\013\n\003lcg\030\002 \001(\002\022\013\n\003tcg\030\003"
  " \001(\002\022\013\n\003vcg\030\004 \001(\002\022\016\n\006length\030\005 \001(\002\022\017\n\007bre"
  "adth\030\006 \001(\002\022\016\n\006height\030\007 \001(\002\022\017\n\007density\030\010 "
  "\001(\002\022\016\n\006volume\030\t \001(\002\022!\n\004type\030\014 \001(\0162\023.ship"
  ".Unit.UnitType\"]\n\010UnitType\022\013\n\007BALLAST\020\000\022"
  "\014\n\010CARGODRY\020\001\022\r\n\tCARGOTANK\020\002\022\007\n\003HFO\020\003\022\006\n"
  "\002DO\020\004\022\006\n\002LO\020\005\022\006\n\002FW\020\006\022\006\n\002VA\020\007\"\201\001\n\tBulkCa"
  "rgo\022\014\n\004Name\030\001 \001(\t\022\013\n\003lcg\030\002 \001(\002\022\013\n\003tcg\030\003 "
  "\001(\002\022\013\n\003vcg\030\004 \001(\002\022\016\n\006length\030\005 \001(\002\022\017\n\007brea"
  "dth\030\006 \001(\002\022\016\n\006height\030\007 \001(\002\022\016\n\006weight\030\t \001("
  "\002\"P\n\tConstants\022\014\n\004Name\030\001 \001(\t\022\013\n\003lcg\030\002 \001("
  "\002\022\013\n\003tcg\030\003 \001(\002\022\013\n\003vcg\030\004 \001(\002\022\016\n\006weight\030\005 "
  "\001(\002\"\215\001\n\014ShipBodyData\022 \n\010shipdata\030\001 \003(\0132\016"
  ".ship.ShipData\022\030\n\004unit\030\002 \003(\0132\n.ship.Unit"
  "\022\"\n\tconstants\030\003 \003(\0132\017.ship.Constants\022\035\n\004"
  "bulk\030\006 \003(\0132\017.ship.BulkCargob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Ship_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Ship_2eproto_sccs[5] = {
  &scc_info_BulkCargo_Ship_2eproto.base,
  &scc_info_Constants_Ship_2eproto.base,
  &scc_info_ShipBodyData_Ship_2eproto.base,
  &scc_info_ShipData_Ship_2eproto.base,
  &scc_info_Unit_Ship_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Ship_2eproto_once;
static bool descriptor_table_Ship_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Ship_2eproto = {
  &descriptor_table_Ship_2eproto_initialized, descriptor_table_protodef_Ship_2eproto, "Ship.proto", 915,
  &descriptor_table_Ship_2eproto_once, descriptor_table_Ship_2eproto_sccs, descriptor_table_Ship_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_Ship_2eproto::offsets,
  file_level_metadata_Ship_2eproto, 5, file_level_enum_descriptors_Ship_2eproto, file_level_service_descriptors_Ship_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Ship_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Ship_2eproto), true);
namespace ship {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Unit_UnitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Ship_2eproto);
  return file_level_enum_descriptors_Ship_2eproto[0];
}
bool Unit_UnitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Unit_UnitType Unit::BALLAST;
constexpr Unit_UnitType Unit::CARGODRY;
constexpr Unit_UnitType Unit::CARGOTANK;
constexpr Unit_UnitType Unit::HFO;
constexpr Unit_UnitType Unit::DO;
constexpr Unit_UnitType Unit::LO;
constexpr Unit_UnitType Unit::FW;
constexpr Unit_UnitType Unit::VA;
constexpr Unit_UnitType Unit::UnitType_MIN;
constexpr Unit_UnitType Unit::UnitType_MAX;
constexpr int Unit::UnitType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ShipData::InitAsDefaultInstance() {
}
class ShipData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShipData::kShipNameFieldNumber;
const int ShipData::kLOAFieldNumber;
const int ShipData::kHeightFieldNumber;
const int ShipData::kBeamFieldNumber;
const int ShipData::kDeckStrFieldNumber;
const int ShipData::kMinDraftFieldNumber;
const int ShipData::kMaxDraftFieldNumber;
const int ShipData::kMaxDWTFieldNumber;
const int ShipData::kLCGLightFieldNumber;
const int ShipData::kTCGLightFieldNumber;
const int ShipData::kVCGLightFieldNumber;
const int ShipData::kLightShipFieldNumber;
const int ShipData::kWaterConditionFieldNumber;
const int ShipData::kTankStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShipData::ShipData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ship.ShipData)
}
ShipData::ShipData(const ShipData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shipname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.shipname().size() > 0) {
    shipname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shipname_);
  }
  ::memcpy(&loa_, &from.loa_,
    static_cast<size_t>(reinterpret_cast<char*>(&tankstr_) -
    reinterpret_cast<char*>(&loa_)) + sizeof(tankstr_));
  // @@protoc_insertion_point(copy_constructor:ship.ShipData)
}

void ShipData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShipData_Ship_2eproto.base);
  shipname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&loa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tankstr_) -
      reinterpret_cast<char*>(&loa_)) + sizeof(tankstr_));
}

ShipData::~ShipData() {
  // @@protoc_insertion_point(destructor:ship.ShipData)
  SharedDtor();
}

void ShipData::SharedDtor() {
  shipname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShipData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShipData& ShipData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShipData_Ship_2eproto.base);
  return *internal_default_instance();
}


void ShipData::Clear() {
// @@protoc_insertion_point(message_clear_start:ship.ShipData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shipname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&loa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tankstr_) -
      reinterpret_cast<char*>(&loa_)) + sizeof(tankstr_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShipData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ShipName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_shipname(), ptr, ctx, "ship.ShipData.ShipName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float LOA = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          loa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beam = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          beam_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float deckStr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          deckstr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float MinDraft = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          mindraft_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float MaxDraft = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          maxdraft_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 MaxDWT = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          maxdwt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float LCGLight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          lcglight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float TCGLight = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          tcglight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float VCGLight = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          vcglight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 lightShip = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          lightship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float waterCondition = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          watercondition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tankStr = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          tankstr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShipData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ship.ShipData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ShipName = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_shipname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->shipname().data(), static_cast<int>(this->shipname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ship.ShipData.ShipName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float LOA = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &loa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beam = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float deckStr = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deckstr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float MinDraft = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mindraft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float MaxDraft = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxdraft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MaxDWT = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxdwt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float LCGLight = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lcglight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float TCGLight = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcglight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float VCGLight = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vcglight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lightShip = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lightship_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float waterCondition = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &watercondition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tankStr = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tankstr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ship.ShipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ship.ShipData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShipData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ship.ShipData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ShipName = 1;
  if (this->shipname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->shipname().data(), static_cast<int>(this->shipname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ship.ShipData.ShipName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->shipname(), output);
  }

  // float LOA = 2;
  if (!(this->loa() <= 0 && this->loa() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->loa(), output);
  }

  // float height = 3;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->height(), output);
  }

  // float beam = 4;
  if (!(this->beam() <= 0 && this->beam() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->beam(), output);
  }

  // float deckStr = 5;
  if (!(this->deckstr() <= 0 && this->deckstr() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->deckstr(), output);
  }

  // float MinDraft = 6;
  if (!(this->mindraft() <= 0 && this->mindraft() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->mindraft(), output);
  }

  // float MaxDraft = 7;
  if (!(this->maxdraft() <= 0 && this->maxdraft() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->maxdraft(), output);
  }

  // int32 MaxDWT = 8;
  if (this->maxdwt() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->maxdwt(), output);
  }

  // float LCGLight = 9;
  if (!(this->lcglight() <= 0 && this->lcglight() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->lcglight(), output);
  }

  // float TCGLight = 10;
  if (!(this->tcglight() <= 0 && this->tcglight() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->tcglight(), output);
  }

  // float VCGLight = 11;
  if (!(this->vcglight() <= 0 && this->vcglight() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->vcglight(), output);
  }

  // int32 lightShip = 12;
  if (this->lightship() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->lightship(), output);
  }

  // float waterCondition = 13;
  if (!(this->watercondition() <= 0 && this->watercondition() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(13, this->watercondition(), output);
  }

  // float tankStr = 14;
  if (!(this->tankstr() <= 0 && this->tankstr() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(14, this->tankstr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ship.ShipData)
}

::PROTOBUF_NAMESPACE_ID::uint8* ShipData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ship.ShipData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ShipName = 1;
  if (this->shipname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->shipname().data(), static_cast<int>(this->shipname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ship.ShipData.ShipName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->shipname(), target);
  }

  // float LOA = 2;
  if (!(this->loa() <= 0 && this->loa() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->loa(), target);
  }

  // float height = 3;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->height(), target);
  }

  // float beam = 4;
  if (!(this->beam() <= 0 && this->beam() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->beam(), target);
  }

  // float deckStr = 5;
  if (!(this->deckstr() <= 0 && this->deckstr() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->deckstr(), target);
  }

  // float MinDraft = 6;
  if (!(this->mindraft() <= 0 && this->mindraft() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->mindraft(), target);
  }

  // float MaxDraft = 7;
  if (!(this->maxdraft() <= 0 && this->maxdraft() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->maxdraft(), target);
  }

  // int32 MaxDWT = 8;
  if (this->maxdwt() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->maxdwt(), target);
  }

  // float LCGLight = 9;
  if (!(this->lcglight() <= 0 && this->lcglight() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->lcglight(), target);
  }

  // float TCGLight = 10;
  if (!(this->tcglight() <= 0 && this->tcglight() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->tcglight(), target);
  }

  // float VCGLight = 11;
  if (!(this->vcglight() <= 0 && this->vcglight() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->vcglight(), target);
  }

  // int32 lightShip = 12;
  if (this->lightship() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->lightship(), target);
  }

  // float waterCondition = 13;
  if (!(this->watercondition() <= 0 && this->watercondition() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->watercondition(), target);
  }

  // float tankStr = 14;
  if (!(this->tankstr() <= 0 && this->tankstr() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->tankstr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ship.ShipData)
  return target;
}

size_t ShipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ship.ShipData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ShipName = 1;
  if (this->shipname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->shipname());
  }

  // float LOA = 2;
  if (!(this->loa() <= 0 && this->loa() >= 0)) {
    total_size += 1 + 4;
  }

  // float height = 3;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  // float beam = 4;
  if (!(this->beam() <= 0 && this->beam() >= 0)) {
    total_size += 1 + 4;
  }

  // float deckStr = 5;
  if (!(this->deckstr() <= 0 && this->deckstr() >= 0)) {
    total_size += 1 + 4;
  }

  // float MinDraft = 6;
  if (!(this->mindraft() <= 0 && this->mindraft() >= 0)) {
    total_size += 1 + 4;
  }

  // float MaxDraft = 7;
  if (!(this->maxdraft() <= 0 && this->maxdraft() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 MaxDWT = 8;
  if (this->maxdwt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->maxdwt());
  }

  // float LCGLight = 9;
  if (!(this->lcglight() <= 0 && this->lcglight() >= 0)) {
    total_size += 1 + 4;
  }

  // float TCGLight = 10;
  if (!(this->tcglight() <= 0 && this->tcglight() >= 0)) {
    total_size += 1 + 4;
  }

  // float VCGLight = 11;
  if (!(this->vcglight() <= 0 && this->vcglight() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 lightShip = 12;
  if (this->lightship() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->lightship());
  }

  // float waterCondition = 13;
  if (!(this->watercondition() <= 0 && this->watercondition() >= 0)) {
    total_size += 1 + 4;
  }

  // float tankStr = 14;
  if (!(this->tankstr() <= 0 && this->tankstr() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShipData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ship.ShipData)
  GOOGLE_DCHECK_NE(&from, this);
  const ShipData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShipData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ship.ShipData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ship.ShipData)
    MergeFrom(*source);
  }
}

void ShipData::MergeFrom(const ShipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ship.ShipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shipname().size() > 0) {

    shipname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shipname_);
  }
  if (!(from.loa() <= 0 && from.loa() >= 0)) {
    set_loa(from.loa());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    set_height(from.height());
  }
  if (!(from.beam() <= 0 && from.beam() >= 0)) {
    set_beam(from.beam());
  }
  if (!(from.deckstr() <= 0 && from.deckstr() >= 0)) {
    set_deckstr(from.deckstr());
  }
  if (!(from.mindraft() <= 0 && from.mindraft() >= 0)) {
    set_mindraft(from.mindraft());
  }
  if (!(from.maxdraft() <= 0 && from.maxdraft() >= 0)) {
    set_maxdraft(from.maxdraft());
  }
  if (from.maxdwt() != 0) {
    set_maxdwt(from.maxdwt());
  }
  if (!(from.lcglight() <= 0 && from.lcglight() >= 0)) {
    set_lcglight(from.lcglight());
  }
  if (!(from.tcglight() <= 0 && from.tcglight() >= 0)) {
    set_tcglight(from.tcglight());
  }
  if (!(from.vcglight() <= 0 && from.vcglight() >= 0)) {
    set_vcglight(from.vcglight());
  }
  if (from.lightship() != 0) {
    set_lightship(from.lightship());
  }
  if (!(from.watercondition() <= 0 && from.watercondition() >= 0)) {
    set_watercondition(from.watercondition());
  }
  if (!(from.tankstr() <= 0 && from.tankstr() >= 0)) {
    set_tankstr(from.tankstr());
  }
}

void ShipData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ship.ShipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipData::CopyFrom(const ShipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ship.ShipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipData::IsInitialized() const {
  return true;
}

void ShipData::Swap(ShipData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShipData::InternalSwap(ShipData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shipname_.Swap(&other->shipname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(loa_, other->loa_);
  swap(height_, other->height_);
  swap(beam_, other->beam_);
  swap(deckstr_, other->deckstr_);
  swap(mindraft_, other->mindraft_);
  swap(maxdraft_, other->maxdraft_);
  swap(maxdwt_, other->maxdwt_);
  swap(lcglight_, other->lcglight_);
  swap(tcglight_, other->tcglight_);
  swap(vcglight_, other->vcglight_);
  swap(lightship_, other->lightship_);
  swap(watercondition_, other->watercondition_);
  swap(tankstr_, other->tankstr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShipData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Unit::InitAsDefaultInstance() {
}
class Unit::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Unit::kNameFieldNumber;
const int Unit::kLcgFieldNumber;
const int Unit::kTcgFieldNumber;
const int Unit::kVcgFieldNumber;
const int Unit::kLengthFieldNumber;
const int Unit::kBreadthFieldNumber;
const int Unit::kHeightFieldNumber;
const int Unit::kDensityFieldNumber;
const int Unit::kVolumeFieldNumber;
const int Unit::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Unit::Unit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ship.Unit)
}
Unit::Unit(const Unit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&lcg_, &from.lcg_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&lcg_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ship.Unit)
}

void Unit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Unit_Ship_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lcg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&lcg_)) + sizeof(type_));
}

Unit::~Unit() {
  // @@protoc_insertion_point(destructor:ship.Unit)
  SharedDtor();
}

void Unit::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Unit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Unit& Unit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Unit_Ship_2eproto.base);
  return *internal_default_instance();
}


void Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:ship.Unit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lcg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&lcg_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Unit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "ship.Unit.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lcg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tcg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          tcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vcg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          vcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float breadth = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          breadth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float density = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          density_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .ship.Unit.UnitType type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::ship::Unit_UnitType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Unit::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ship.Unit)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ship.Unit.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lcg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lcg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tcg = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vcg = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vcg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float breadth = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &breadth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float density = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &density_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float volume = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ship.Unit.UnitType type = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ship::Unit_UnitType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ship.Unit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ship.Unit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Unit::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ship.Unit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ship.Unit.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // float lcg = 2;
  if (!(this->lcg() <= 0 && this->lcg() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->lcg(), output);
  }

  // float tcg = 3;
  if (!(this->tcg() <= 0 && this->tcg() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->tcg(), output);
  }

  // float vcg = 4;
  if (!(this->vcg() <= 0 && this->vcg() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->vcg(), output);
  }

  // float length = 5;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->length(), output);
  }

  // float breadth = 6;
  if (!(this->breadth() <= 0 && this->breadth() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->breadth(), output);
  }

  // float height = 7;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->height(), output);
  }

  // float density = 8;
  if (!(this->density() <= 0 && this->density() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->density(), output);
  }

  // float volume = 9;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->volume(), output);
  }

  // .ship.Unit.UnitType type = 12;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      12, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ship.Unit)
}

::PROTOBUF_NAMESPACE_ID::uint8* Unit::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ship.Unit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ship.Unit.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // float lcg = 2;
  if (!(this->lcg() <= 0 && this->lcg() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->lcg(), target);
  }

  // float tcg = 3;
  if (!(this->tcg() <= 0 && this->tcg() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->tcg(), target);
  }

  // float vcg = 4;
  if (!(this->vcg() <= 0 && this->vcg() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->vcg(), target);
  }

  // float length = 5;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->length(), target);
  }

  // float breadth = 6;
  if (!(this->breadth() <= 0 && this->breadth() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->breadth(), target);
  }

  // float height = 7;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->height(), target);
  }

  // float density = 8;
  if (!(this->density() <= 0 && this->density() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->density(), target);
  }

  // float volume = 9;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->volume(), target);
  }

  // .ship.Unit.UnitType type = 12;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ship.Unit)
  return target;
}

size_t Unit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ship.Unit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // float lcg = 2;
  if (!(this->lcg() <= 0 && this->lcg() >= 0)) {
    total_size += 1 + 4;
  }

  // float tcg = 3;
  if (!(this->tcg() <= 0 && this->tcg() >= 0)) {
    total_size += 1 + 4;
  }

  // float vcg = 4;
  if (!(this->vcg() <= 0 && this->vcg() >= 0)) {
    total_size += 1 + 4;
  }

  // float length = 5;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 4;
  }

  // float breadth = 6;
  if (!(this->breadth() <= 0 && this->breadth() >= 0)) {
    total_size += 1 + 4;
  }

  // float height = 7;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  // float density = 8;
  if (!(this->density() <= 0 && this->density() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume = 9;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    total_size += 1 + 4;
  }

  // .ship.Unit.UnitType type = 12;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Unit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ship.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  const Unit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Unit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ship.Unit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ship.Unit)
    MergeFrom(*source);
  }
}

void Unit::MergeFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ship.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (!(from.lcg() <= 0 && from.lcg() >= 0)) {
    set_lcg(from.lcg());
  }
  if (!(from.tcg() <= 0 && from.tcg() >= 0)) {
    set_tcg(from.tcg());
  }
  if (!(from.vcg() <= 0 && from.vcg() >= 0)) {
    set_vcg(from.vcg());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    set_length(from.length());
  }
  if (!(from.breadth() <= 0 && from.breadth() >= 0)) {
    set_breadth(from.breadth());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    set_height(from.height());
  }
  if (!(from.density() <= 0 && from.density() >= 0)) {
    set_density(from.density());
  }
  if (!(from.volume() <= 0 && from.volume() >= 0)) {
    set_volume(from.volume());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Unit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ship.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unit::CopyFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ship.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {
  return true;
}

void Unit::Swap(Unit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Unit::InternalSwap(Unit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lcg_, other->lcg_);
  swap(tcg_, other->tcg_);
  swap(vcg_, other->vcg_);
  swap(length_, other->length_);
  swap(breadth_, other->breadth_);
  swap(height_, other->height_);
  swap(density_, other->density_);
  swap(volume_, other->volume_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Unit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BulkCargo::InitAsDefaultInstance() {
}
class BulkCargo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BulkCargo::kNameFieldNumber;
const int BulkCargo::kLcgFieldNumber;
const int BulkCargo::kTcgFieldNumber;
const int BulkCargo::kVcgFieldNumber;
const int BulkCargo::kLengthFieldNumber;
const int BulkCargo::kBreadthFieldNumber;
const int BulkCargo::kHeightFieldNumber;
const int BulkCargo::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BulkCargo::BulkCargo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ship.BulkCargo)
}
BulkCargo::BulkCargo(const BulkCargo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&lcg_, &from.lcg_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&lcg_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:ship.BulkCargo)
}

void BulkCargo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkCargo_Ship_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lcg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&lcg_)) + sizeof(weight_));
}

BulkCargo::~BulkCargo() {
  // @@protoc_insertion_point(destructor:ship.BulkCargo)
  SharedDtor();
}

void BulkCargo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BulkCargo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkCargo& BulkCargo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkCargo_Ship_2eproto.base);
  return *internal_default_instance();
}


void BulkCargo::Clear() {
// @@protoc_insertion_point(message_clear_start:ship.BulkCargo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lcg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&lcg_)) + sizeof(weight_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BulkCargo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "ship.BulkCargo.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lcg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tcg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          tcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vcg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          vcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float breadth = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          breadth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float weight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BulkCargo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ship.BulkCargo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ship.BulkCargo.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lcg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lcg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tcg = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vcg = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vcg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float breadth = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &breadth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float weight = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ship.BulkCargo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ship.BulkCargo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BulkCargo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ship.BulkCargo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ship.BulkCargo.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // float lcg = 2;
  if (!(this->lcg() <= 0 && this->lcg() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->lcg(), output);
  }

  // float tcg = 3;
  if (!(this->tcg() <= 0 && this->tcg() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->tcg(), output);
  }

  // float vcg = 4;
  if (!(this->vcg() <= 0 && this->vcg() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->vcg(), output);
  }

  // float length = 5;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->length(), output);
  }

  // float breadth = 6;
  if (!(this->breadth() <= 0 && this->breadth() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->breadth(), output);
  }

  // float height = 7;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->height(), output);
  }

  // float weight = 9;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ship.BulkCargo)
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkCargo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ship.BulkCargo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ship.BulkCargo.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // float lcg = 2;
  if (!(this->lcg() <= 0 && this->lcg() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->lcg(), target);
  }

  // float tcg = 3;
  if (!(this->tcg() <= 0 && this->tcg() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->tcg(), target);
  }

  // float vcg = 4;
  if (!(this->vcg() <= 0 && this->vcg() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->vcg(), target);
  }

  // float length = 5;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->length(), target);
  }

  // float breadth = 6;
  if (!(this->breadth() <= 0 && this->breadth() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->breadth(), target);
  }

  // float height = 7;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->height(), target);
  }

  // float weight = 9;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ship.BulkCargo)
  return target;
}

size_t BulkCargo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ship.BulkCargo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // float lcg = 2;
  if (!(this->lcg() <= 0 && this->lcg() >= 0)) {
    total_size += 1 + 4;
  }

  // float tcg = 3;
  if (!(this->tcg() <= 0 && this->tcg() >= 0)) {
    total_size += 1 + 4;
  }

  // float vcg = 4;
  if (!(this->vcg() <= 0 && this->vcg() >= 0)) {
    total_size += 1 + 4;
  }

  // float length = 5;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 4;
  }

  // float breadth = 6;
  if (!(this->breadth() <= 0 && this->breadth() >= 0)) {
    total_size += 1 + 4;
  }

  // float height = 7;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  // float weight = 9;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkCargo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ship.BulkCargo)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkCargo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkCargo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ship.BulkCargo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ship.BulkCargo)
    MergeFrom(*source);
  }
}

void BulkCargo::MergeFrom(const BulkCargo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ship.BulkCargo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (!(from.lcg() <= 0 && from.lcg() >= 0)) {
    set_lcg(from.lcg());
  }
  if (!(from.tcg() <= 0 && from.tcg() >= 0)) {
    set_tcg(from.tcg());
  }
  if (!(from.vcg() <= 0 && from.vcg() >= 0)) {
    set_vcg(from.vcg());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    set_length(from.length());
  }
  if (!(from.breadth() <= 0 && from.breadth() >= 0)) {
    set_breadth(from.breadth());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    set_height(from.height());
  }
  if (!(from.weight() <= 0 && from.weight() >= 0)) {
    set_weight(from.weight());
  }
}

void BulkCargo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ship.BulkCargo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkCargo::CopyFrom(const BulkCargo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ship.BulkCargo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkCargo::IsInitialized() const {
  return true;
}

void BulkCargo::Swap(BulkCargo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BulkCargo::InternalSwap(BulkCargo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lcg_, other->lcg_);
  swap(tcg_, other->tcg_);
  swap(vcg_, other->vcg_);
  swap(length_, other->length_);
  swap(breadth_, other->breadth_);
  swap(height_, other->height_);
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkCargo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Constants::InitAsDefaultInstance() {
}
class Constants::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Constants::kNameFieldNumber;
const int Constants::kLcgFieldNumber;
const int Constants::kTcgFieldNumber;
const int Constants::kVcgFieldNumber;
const int Constants::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Constants::Constants()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ship.Constants)
}
Constants::Constants(const Constants& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&lcg_, &from.lcg_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&lcg_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:ship.Constants)
}

void Constants::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Constants_Ship_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lcg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&lcg_)) + sizeof(weight_));
}

Constants::~Constants() {
  // @@protoc_insertion_point(destructor:ship.Constants)
  SharedDtor();
}

void Constants::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Constants::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Constants& Constants::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Constants_Ship_2eproto.base);
  return *internal_default_instance();
}


void Constants::Clear() {
// @@protoc_insertion_point(message_clear_start:ship.Constants)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lcg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&lcg_)) + sizeof(weight_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Constants::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "ship.Constants.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lcg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tcg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          tcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vcg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          vcg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Constants::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ship.Constants)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ship.Constants.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lcg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lcg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tcg = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vcg = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vcg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float weight = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ship.Constants)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ship.Constants)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Constants::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ship.Constants)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ship.Constants.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // float lcg = 2;
  if (!(this->lcg() <= 0 && this->lcg() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->lcg(), output);
  }

  // float tcg = 3;
  if (!(this->tcg() <= 0 && this->tcg() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->tcg(), output);
  }

  // float vcg = 4;
  if (!(this->vcg() <= 0 && this->vcg() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->vcg(), output);
  }

  // float weight = 5;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ship.Constants)
}

::PROTOBUF_NAMESPACE_ID::uint8* Constants::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ship.Constants)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ship.Constants.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // float lcg = 2;
  if (!(this->lcg() <= 0 && this->lcg() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->lcg(), target);
  }

  // float tcg = 3;
  if (!(this->tcg() <= 0 && this->tcg() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->tcg(), target);
  }

  // float vcg = 4;
  if (!(this->vcg() <= 0 && this->vcg() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->vcg(), target);
  }

  // float weight = 5;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ship.Constants)
  return target;
}

size_t Constants::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ship.Constants)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // float lcg = 2;
  if (!(this->lcg() <= 0 && this->lcg() >= 0)) {
    total_size += 1 + 4;
  }

  // float tcg = 3;
  if (!(this->tcg() <= 0 && this->tcg() >= 0)) {
    total_size += 1 + 4;
  }

  // float vcg = 4;
  if (!(this->vcg() <= 0 && this->vcg() >= 0)) {
    total_size += 1 + 4;
  }

  // float weight = 5;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Constants::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ship.Constants)
  GOOGLE_DCHECK_NE(&from, this);
  const Constants* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Constants>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ship.Constants)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ship.Constants)
    MergeFrom(*source);
  }
}

void Constants::MergeFrom(const Constants& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ship.Constants)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (!(from.lcg() <= 0 && from.lcg() >= 0)) {
    set_lcg(from.lcg());
  }
  if (!(from.tcg() <= 0 && from.tcg() >= 0)) {
    set_tcg(from.tcg());
  }
  if (!(from.vcg() <= 0 && from.vcg() >= 0)) {
    set_vcg(from.vcg());
  }
  if (!(from.weight() <= 0 && from.weight() >= 0)) {
    set_weight(from.weight());
  }
}

void Constants::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ship.Constants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Constants::CopyFrom(const Constants& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ship.Constants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Constants::IsInitialized() const {
  return true;
}

void Constants::Swap(Constants* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Constants::InternalSwap(Constants* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lcg_, other->lcg_);
  swap(tcg_, other->tcg_);
  swap(vcg_, other->vcg_);
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Constants::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShipBodyData::InitAsDefaultInstance() {
}
class ShipBodyData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShipBodyData::kShipdataFieldNumber;
const int ShipBodyData::kUnitFieldNumber;
const int ShipBodyData::kConstantsFieldNumber;
const int ShipBodyData::kBulkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShipBodyData::ShipBodyData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ship.ShipBodyData)
}
ShipBodyData::ShipBodyData(const ShipBodyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      shipdata_(from.shipdata_),
      unit_(from.unit_),
      constants_(from.constants_),
      bulk_(from.bulk_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ship.ShipBodyData)
}

void ShipBodyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShipBodyData_Ship_2eproto.base);
}

ShipBodyData::~ShipBodyData() {
  // @@protoc_insertion_point(destructor:ship.ShipBodyData)
  SharedDtor();
}

void ShipBodyData::SharedDtor() {
}

void ShipBodyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShipBodyData& ShipBodyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShipBodyData_Ship_2eproto.base);
  return *internal_default_instance();
}


void ShipBodyData::Clear() {
// @@protoc_insertion_point(message_clear_start:ship.ShipBodyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shipdata_.Clear();
  unit_.Clear();
  constants_.Clear();
  bulk_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShipBodyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ship.ShipData shipdata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_shipdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .ship.Unit unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_unit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .ship.Constants constants = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_constants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .ship.BulkCargo bulk = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_bulk(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShipBodyData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ship.ShipBodyData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ship.ShipData shipdata = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_shipdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ship.Unit unit = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_unit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ship.Constants constants = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ship.BulkCargo bulk = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_bulk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ship.ShipBodyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ship.ShipBodyData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShipBodyData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ship.ShipBodyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ship.ShipData shipdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shipdata_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->shipdata(static_cast<int>(i)),
      output);
  }

  // repeated .ship.Unit unit = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unit_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->unit(static_cast<int>(i)),
      output);
  }

  // repeated .ship.Constants constants = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->constants_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->constants(static_cast<int>(i)),
      output);
  }

  // repeated .ship.BulkCargo bulk = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bulk_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->bulk(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ship.ShipBodyData)
}

::PROTOBUF_NAMESPACE_ID::uint8* ShipBodyData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ship.ShipBodyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ship.ShipData shipdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shipdata_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->shipdata(static_cast<int>(i)), target);
  }

  // repeated .ship.Unit unit = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unit_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->unit(static_cast<int>(i)), target);
  }

  // repeated .ship.Constants constants = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->constants_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->constants(static_cast<int>(i)), target);
  }

  // repeated .ship.BulkCargo bulk = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bulk_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->bulk(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ship.ShipBodyData)
  return target;
}

size_t ShipBodyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ship.ShipBodyData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ship.ShipData shipdata = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->shipdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->shipdata(static_cast<int>(i)));
    }
  }

  // repeated .ship.Unit unit = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->unit_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->unit(static_cast<int>(i)));
    }
  }

  // repeated .ship.Constants constants = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->constants_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->constants(static_cast<int>(i)));
    }
  }

  // repeated .ship.BulkCargo bulk = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->bulk_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->bulk(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShipBodyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ship.ShipBodyData)
  GOOGLE_DCHECK_NE(&from, this);
  const ShipBodyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShipBodyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ship.ShipBodyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ship.ShipBodyData)
    MergeFrom(*source);
  }
}

void ShipBodyData::MergeFrom(const ShipBodyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ship.ShipBodyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shipdata_.MergeFrom(from.shipdata_);
  unit_.MergeFrom(from.unit_);
  constants_.MergeFrom(from.constants_);
  bulk_.MergeFrom(from.bulk_);
}

void ShipBodyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ship.ShipBodyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipBodyData::CopyFrom(const ShipBodyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ship.ShipBodyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipBodyData::IsInitialized() const {
  return true;
}

void ShipBodyData::Swap(ShipBodyData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShipBodyData::InternalSwap(ShipBodyData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&shipdata_)->InternalSwap(CastToBase(&other->shipdata_));
  CastToBase(&unit_)->InternalSwap(CastToBase(&other->unit_));
  CastToBase(&constants_)->InternalSwap(CastToBase(&other->constants_));
  CastToBase(&bulk_)->InternalSwap(CastToBase(&other->bulk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShipBodyData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ship
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ship::ShipData* Arena::CreateMaybeMessage< ::ship::ShipData >(Arena* arena) {
  return Arena::CreateInternal< ::ship::ShipData >(arena);
}
template<> PROTOBUF_NOINLINE ::ship::Unit* Arena::CreateMaybeMessage< ::ship::Unit >(Arena* arena) {
  return Arena::CreateInternal< ::ship::Unit >(arena);
}
template<> PROTOBUF_NOINLINE ::ship::BulkCargo* Arena::CreateMaybeMessage< ::ship::BulkCargo >(Arena* arena) {
  return Arena::CreateInternal< ::ship::BulkCargo >(arena);
}
template<> PROTOBUF_NOINLINE ::ship::Constants* Arena::CreateMaybeMessage< ::ship::Constants >(Arena* arena) {
  return Arena::CreateInternal< ::ship::Constants >(arena);
}
template<> PROTOBUF_NOINLINE ::ship::ShipBodyData* Arena::CreateMaybeMessage< ::ship::ShipBodyData >(Arena* arena) {
  return Arena::CreateInternal< ::ship::ShipBodyData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
